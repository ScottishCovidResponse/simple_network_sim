import random

import pytest

from simple_network_sim import common, network_of_populations as np, loaders


def test_basic_simulation(demographicsFilename, commute_moves, compartmentTransitionsByAgeFilename, simplified_mixing_matrix):
    network = np.createNetworkOfPopulation(compartmentTransitionsByAgeFilename, demographicsFilename, commute_moves, simplified_mixing_matrix)
    np.exposeRegions(["S08000016"], 10, {"[17,70)": 1.0}, network.states[0])

    result = np.basicSimulationInternalAgeStructure(network=network, timeHorizon=200)

    expected = [
        0,
        4.27,
        5.959639,
        7.495608477753796,
        9.312950996504124,
        11.551011756464085,
        14.320847095190823,
        17.75048118988921,
        21.996795147859874,
        27.253502056556055,
        33.759982771648644,
        41.81203473087441,
        51.77510020066589,
        64.10056102079534,
        79.34580230193347,
        98.19889992702174,
        121.50897178999506,
        150.32345422153008,
        185.9338279268559,
        229.93162670365157,
        284.2769208184738,
        351.3818764552012,
        434.2124501544157,
        536.4117727030155,
        662.449289612461,
        817.8002177581517,
        1009.1602887050876,
        1244.7009843381686,
        1534.3703913524043,
        1890.244214978079,
        2326.930144214053,
        2862.026337515864,
        3516.6309536649824,
        4315.894077887634,
        5289.595953389662,
        6472.726404900927,
        7906.030801601505,
        9636.480191696508,
        11717.621450017183,
        14209.773463068264,
        17180.064831722084,
        20702.363374443128,
        24857.227584213222,
        29732.10071463242,
        35422.03282230471,
        42031.19462703881,
        49675.270323267316,
        58484.44541514358,
        68606.18755766955,
        80206.52863218196,
        93468.37670763559,
        108585.79297873464,
        125754.26380506349,
        145158.58169816932,
        166961.50500836244,
        191297.16423530082,
        218272.47053167655,
        247977.08259687023,
        280498.03269855847,
        315930.22808979504,
        354371.06013425475,
        395888.67679867166,
        440460.14503308164,
        487886.45706316247,
        537702.7876215727,
        589110.4340320886,
        640957.6849588689,
        691788.0192179198,
        739955.8726641333,
        783787.7218235906,
        821749.1181608901,
        852576.5618970307,
        875349.4250063719,
        889502.8644596429,
        894803.0459199584,
        891311.0560702941,
        879352.6581985243,
        859496.3712321862,
        832531.4260110625,
        799434.6423162558,
        761320.4423787826,
        719376.6229618852,
        674795.0174039241,
        628707.9156066444,
        582138.4799454131,
        535968.8099875203,
        490925.1430479796,
        447577.11134606344,
        406347.04248060606,
        367525.4649055762,
        331289.6904892305,
        297723.1899891342,
        266834.24309050536,
        238572.954330316,
        212846.17314702645,
        189530.16373952958,
        168481.06926419144,
        149543.33390655817,
        132556.30907537584,
        117359.29447663156,
        103795.2645511811,
        91713.5153922015,
        80971.44362362004,
        71435.6414824656,
        62982.46456891987,
        55498.20230394571,
        48878.95713392983,
        43030.31744297211,
        37866.89109783149,
        33311.751444635156,
        29295.835152551903,
        25757.321245073847,
        22641.01264248979,
        19897.7352369857,
        17483.764637611337,
        15360.2869927562,
        13492.8974956348,
        11851.138111853359,
        10408.074578385917,
        9139.911680250565,
        8025.645109970395,
        7046.747771861226,
        6186.888142267098,
        5431.678186452661,
        4768.448323022994,
        4186.046986887644,
        3674.6624487379686,
        3225.6646854118185,
        2831.4652485617517,
        2485.3932394143317,
        2181.585658488938,
        1914.8905563552803,
        1680.7815618054196,
        1475.282505295269,
        1294.90098710655,
        1136.5698609322121,
        997.5957144628759,
        875.613529309787,
        768.5467936959965,
        674.5724233573691,
        592.0899196604597,
        519.694259734913,
        456.152072104036,
        400.38070353068315,
        351.4298291984133,
        308.46529950406375,
        270.7549531896484,
        237.65615878758373,
        208.60487484903072,
        183.1060445839831,
        160.7251627368329,
        141.08087208824165,
        123.83846421409002,
        108.7041743139495,
        95.42017328457766,
        83.76017197159223,
        73.52556287401259,
        64.54203366959986,
        56.65659492244026,
        49.73497135939408,
        43.65931227493847,
        38.326182047007805,
        33.64479651004318,
        29.53547511523336,
        25.928282482020425,
        22.76183617111787,
        19.982260341906223,
        17.54226744395054,
        15.40035227558237,
        13.520084658978979,
        11.869488663454694,
        10.420497785313,
        9.148476788684652,
        8.031802049340644,
        7.051493241878444,
        6.190890086939129,
        5.4353686441520255,
        4.772092311431021,
        4.189793283573167,
        3.678580742938628,
        3.229772511192037,
        2.8357472914439605,
        2.489814981481909,
        2.186102847121066,
        1.9194556153004891,
        1.6853477840211535,
        1.479806654623243,
        1.2993447747902191,
        1.1409006411696694,
        1.0017866513566747,
        0.8796434185998793,
        0.7723996710743358,
        0.6782370527710987,
        0.5955592266070132,
        0.5229647536857165,
        0.4592232869945605,
        0.40325467430040696,
        0.35411061457427045,
        0.31095855577652015,
        0.27306756001328125,
    ]

    assert result == pytest.approx(expected)


def test_basic_simulation_100_runs(demographicsFilename, commute_moves, compartmentTransitionsByAgeFilename, simplified_mixing_matrix):
    network = np.createNetworkOfPopulation(compartmentTransitionsByAgeFilename, demographicsFilename, commute_moves, simplified_mixing_matrix)

    runs = []
    rand = random.Random(1)
    for _ in range(100):
        regions = rand.choices(list(network.graph.nodes()), k=1)
        # This was added for backwards compatibility. Notice that ("m", "S") diminishes at each run.
        # TODO: make sure the states[0] is always reset after each run or that a new state is created before running
        #       exposeRegions
        network.states[0][regions[0]][("[17,70)","E")] = 0
        np.exposeRegions(regions, 10, {"[17,70)": 1.0}, network.states[0])
        runs.append(np.basicSimulationInternalAgeStructure(network=network, timeHorizon=200))
    result = common.generateMeanPlot(runs)

    expected = [
        0.0,
        50.59949999999987,
        70.62172215000008,
        88.53926642163165,
        109.56638984679033,
        135.3488478609305,
        167.15082948354677,
        206.4094684494291,
        254.87844439509144,
        314.7185741954954,
        388.59559137082476,
        479.7983379299952,
        592.3838806206318,
        731.3559557275164,
        902.8842887373659,
        1114.5739025238947,
        1375.7954196690825,
        1698.0895938826466,
        2095.6618964312024,
        2585.9859489756645,
        3190.5379228715988,
        3935.6876661668234,
        4853.776164091524,
        5984.412795350271,
        7376.029413661891,
        9087.731120773346,
        11191.485092861178,
        13774.688164388255,
        16943.15000113538,
        20824.520194683446,
        25572.172463077204,
        31369.5341198772,
        38434.808414676154,
        47025.97097158864,
        57445.81123089518,
        70046.60603543067,
        85233.71308810386,
        103466.90779056003,
        125257.62151192984,
        151159.38764327308,
        181747.88587013207,
        217586.28122321094,
        259171.56553988758,
        306858.9802819134,
        360765.04255378986,
        420655.71700988465,
        485834.7041238176,
        555056.1282368934,
        626492.6578308382,
        697789.1763059818,
        766218.8595233044,
        828932.5118592142,
        883260.611697338,
        927004.7587131825,
        958654.2245930852,
        977486.5385571851,
        983547.2290815535,
        977535.6128215935,
        960638.9450614427,
        934355.3930802131,
        900334.1190900559,
        860246.575864602,
        815692.2098822915,
        768135.58782417,
        718869.5304079588,
        668998.506903137,
        619437.0652218632,
        570918.8037230526,
        524012.0990086423,
        479139.46494030225,
        436598.0929121139,
        396579.853081164,
        359189.7683763683,
        324462.57984179584,
        292377.3946288273,
        262870.53759185964,
        235846.7014200487,
        211188.42491579597,
        188763.90557849314,
        168433.19558355943,
        150052.91805550113,
        133479.7284621701,
        118572.79300109974,
        105195.54666730025,
        93216.94227780258,
        82512.33628264254,
        72964.10117509672,
        64462.017551941884,
        56903.47988225256,
        50193.54258744338,
        44244.83109282933,
        38977.3421710582,
        34318.15728799244,
        30201.091219447102,
        26566.296006758344,
        23359.837648848217,
        20533.260084532627,
        18043.14823019335,
        15850.699254508088,
        13921.308977128512,
        12224.1783068136,
        10731.942988746905,
        9420.328592491755,
        8267.831611726908,
        7255.426729665563,
        6366.299693697905,
        5585.604804395274,
        4900.245725464529,
        4298.678134043983,
        3770.7326302868805,
        3307.4562907416716,
        2900.971264478855,
        2544.348860346568,
        2231.497647110384,
        1957.0641769087053,
        1716.3450398083555,
        1505.2090582990652,
        1320.028531672809,
        1157.6185388012336,
        1015.1834020819375,
        890.2695041364931,
        780.7237315534574,
        684.6568962777664,
        600.4115551117451,
        526.5337113525702,
        461.7479401101524,
        404.9355306708408,
        355.1152857848458,
        311.42665936891757,
        273.1149512445127,
        239.51831058091298,
        210.05632907111686,
        184.22003090246588,
        161.56308963535048,
        141.6941224869806,
        124.26993052137408,
        108.98956913345586,
        95.58914722148646,
        83.8372657812937,
        73.53101751932167,
        64.4924786404041,
        56.56563237295632,
        49.61367118463504,
        43.51663113590786,
        38.16931752415832,
        33.479485981417,
        29.366247588060755,
        25.75867042659338,
        22.594553388944426,
        19.81935102492087,
        17.385230828992142,
        15.250246651917948,
        13.377613931920871,
        11.735074201530225,
        10.294337871080447,
        9.030595644676673,
        7.9220901125476235,
        6.949740105559316,
        6.096811311228152,
        5.348627451619362,
        4.6923170258843,
        4.116591236020234,
        3.6115492543810506,
        3.1685074648708795,
        2.7798497248108607,
        2.438896058369632,
        2.13978751149517,
        1.8773851780059214,
        1.6471816517409306,
        1.4452233746813397,
        1.2680425394659165,
        1.1125973699984781,
        0.9762197487496883,
        0.8565692864012233,
        0.7515930408685935,
        0.6594901904002693,
        0.5786810510775723,
        0.5077799041156941,
        0.44557116419188975,
        0.39098847774267936,
        0.3430963907774283,
        0.3010742701274156,
        0.26420220095574254,
        0.23184861746776908,
        0.20345945367477453,
        0.17854862729288437,
        0.15668969285891715,
        0.13750852031262045,
        0.12067687297962605,
        0.10590677439727939,
        0.09294556702441177,
        0.08157157780128035,
        0.07159031598340927,
        0.06283113784368784,
        0.055144320879265,
        0.0483984972124745,
        0.04247840206005266,
        0.037282898569080444,
        0.032723245075058575,
        0.028721575009421546,
    ]

    assert result == pytest.approx(expected)
